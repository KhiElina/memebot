# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞—à–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–¥—É–ª–µ–π(–±–∏–±–ª–∏–æ—Ç–µ–∫)
!pip install pytelegrambotapi - q
!pip install - U g4f - q
!pip install browser - cookie3 - q
!pip install aiohttp_socks - q
!pip install diffusers - q
!pip install deep - translator - q

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–æ—Ç–∞
import telebot;

bot = telebot.TeleBot('6617358370:AAHaGEknTvx1MgM1zZsWXmoVucadPN7XdxQ');  # –í–≤–æ–¥–∏–º –Ω–∞—à —Ç–æ–∫–µ–Ω(–±–æ—Ç–∞)
from deep_translator import GoogleTranslator  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –≥—É–≥–ª-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫
from diffusers import DiffusionPipeline  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –î–∏—Ñ—Ñ—É–∑–æ—Ä—ã(–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –ø–∏—Ç–æ–Ω–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
import torch
from telebot import types

import g4f
from g4f.Provider import (
    GeekGpt,
    Liaobots,
    Phind,
    Raycast,
    RetryProvider)
from g4f.client import Client
import nest_asyncio

nest_asyncio.apply()

client = Client(
    provider=RetryProvider([
        g4f.Provider.Liaobots,
        g4f.Provider.GeekGpt,
        g4f.Provider.Phind,
        g4f.Provider.Raycast
    ])
)
chat_history = [{"role": "user", "content": '–û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ'}]


def send_request(message):
    global chat_history
    chat_history[0]["content"] += message + " "

    try:
        response = g4f.ChatCompletion.create(
            model=g4f.models.gpt_4,
            messages=chat_history
        )
    except Exception as err:
        print("–í—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –Ω–µ –æ—Ç–≤–µ—á–∞—é—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–π–∑–∂–µ")
    print(chat_history)
    chat_history[0]["content"] += response + " "
    return response


def send_photo1(message):  # –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    base = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-base-1.0", torch_dtype=torch.float16, variant="fp16", use_safetensors=True)

    base.to("cuda")
    refiner = DiffusionPipeline.from_pretrained(
        "stabilityai/stable-diffusion-xl-refiner-1.0",
        text_encoder_2=base.text_encoder_2,
        vae=base.vae,
        torch_dtype=torch.float16,
        use_safetensors=True,
        variant="fp16", )
    refiner.to("cuda")

    n_steps = 40
    high_noise_frac = 0.8

    prompt = message

    image = base(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_end=high_noise_frac,
        output_type="latent", ).images
    image = refiner(
        prompt=prompt,
        num_inference_steps=n_steps,
        denoising_start=high_noise_frac,
        image=image, ).images[0]
    return image  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã")
    btn2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì")
    markup.add(btn1, btn2)
    bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', reply_markup=markup)


@bot.message_handler(content_types=['text'])
def func(message):
    if (message.text == "üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã"):
        bot.send_message(message.chat.id, text="–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏–≤–µ—Ç! –°–ø–∞—Å–∏–±–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—à—å—Å—è –º–Ω–æ–π!!!")
    elif (message.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
        btn2 = types.KeyboardButton("–î–ª—è —á–µ–≥–æ —è —Å–æ–∑–¥–∞–Ω?")
        back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é")
        markup.add(btn1, btn2, back)
        bot.send_message(message.chat.id, text="–ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å", reply_markup=markup)

    elif (message.text == "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"):
        bot.send_message(message.chat.id, "Meme Generator Bot")

    elif message.text == "–î–ª—è —á–µ–≥–æ —è —Å–æ–∑–¥–∞–Ω?":
        bot.send_message(message.chat.id, text=" –ü—Ä–∏–¥—É–º–∞—Ç—å —à—É—Ç–∫—É –∏ –∏–∑–æ–±—Ä–∞–∑–∏—Ç—å –µ—ë, –≤–Ω–µ–∑–∞–≤–∏—Å–∏–º–∏—Å—Ç–∏ –æ—Ç —Ç–≤–æ–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")

    elif (message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è üëã")
        button2 = types.KeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚ùì")
        markup.add(button1, button2)
        bot.send_message(message.chat.id, text=" –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é", reply_markup=markup)
    else:
        input_1 = GoogleTranslator(source='auto', target='en').translate(
            message.text)  # –ù–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
        input_to_ai = "–°ome up with a joke about " + input_1  # –ü–æ–º–∏–º–æ –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø—Ä–æ—Å–∏–º –µ–≥–æ –ø–æ—à—É—Ç–∏—Ç—å –Ω–∞ "–ù–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        output = GoogleTranslator(source='auto', target='ru').translate(
            send_request(input_to_ai))  # –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ —Ä—É—Å—Å–∫–∏–π
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—É–ø–µ—Ä –º–µ–≥–∞)(—à—É—Ç–∫–∞ –æ—Ç –±–æ—Ç–∞)
        bot.send_message(message.chat.id, output)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º (—Å—É–ø–µ—Ä –º–µ–≥–∞) –∫–∞—Ä—Ç–∏–Ω–∫—É —Å–æ–∑–¥–∞–Ω–Ω–æ–π –ø–æ –Ω–∞—à–µ–π —à—É—Ç–∫–µ
        bot.send_photo(message.chat.id, send_photo1(output))  # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –ø–æ –Ω–∞—à–µ–π —Ñ–æ—Ç–∫–µ


bot.polling(none_stop=True, interval=0)